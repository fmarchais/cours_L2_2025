[
  {
    "objectID": "pages/TP2.html",
    "href": "pages/TP2.html",
    "title": "TP 2",
    "section": "",
    "text": "Dans ce TP, on explorera le jeu de données microorganisms, qu’on appellera micro, et example_isolates qui contient les données de sensibilité aux antibiotiques de patients infectés par différents microorganismes.",
    "crumbs": [
      "TP 2"
    ]
  },
  {
    "objectID": "pages/TP2.html#micro",
    "href": "pages/TP2.html#micro",
    "title": "TP 2",
    "section": "micro",
    "text": "micro",
    "crumbs": [
      "TP 2"
    ]
  },
  {
    "objectID": "pages/TP2.html#example_isolates",
    "href": "pages/TP2.html#example_isolates",
    "title": "TP 2",
    "section": "example_isolates",
    "text": "example_isolates",
    "crumbs": [
      "TP 2"
    ]
  },
  {
    "objectID": "pages/TP2.html#exploration",
    "href": "pages/TP2.html#exploration",
    "title": "TP 2",
    "section": "Exploration",
    "text": "Exploration\n\n\n\n\n\n\n\n\nRetrouver le nom complet de B_STRPT_PNMN\n\n\n\n\n\n\n\n\nEvaluer la sensibilité d’e.coli (B_ESCHR_COLI) à la Penicilline\n\n\n\n\n\n\n\n\n\n\n\nCONSIGNE : Chercher Escherichia Coli et Streptococcus pneumoniae. Sont-elles sensibles à la penicilline ? Pourquoi ?",
    "crumbs": [
      "TP 2"
    ]
  },
  {
    "objectID": "pages/TP2.html#nettoyage",
    "href": "pages/TP2.html#nettoyage",
    "title": "TP 2",
    "section": "Nettoyage",
    "text": "Nettoyage\nPour rendre les donneés plus lisibles, on va pivoter la table\n\n\n\n\n\n\n\n\nIdentifier le pourcentage de résistance à chaque antibiotique",
    "crumbs": [
      "TP 2"
    ]
  },
  {
    "objectID": "pages/TP2.html#visualiser-les-données",
    "href": "pages/TP2.html#visualiser-les-données",
    "title": "TP 2",
    "section": "Visualiser les données",
    "text": "Visualiser les données",
    "crumbs": [
      "TP 2"
    ]
  },
  {
    "objectID": "pages/TP1.html#exercice-1-explorer-les-données",
    "href": "pages/TP1.html#exercice-1-explorer-les-données",
    "title": "TP 1",
    "section": "Exercice 1 : Explorer les données",
    "text": "Exercice 1 : Explorer les données\n\n\n\n\n\n\nNote\n\n\n\nLe jeu de données s’appelle cytomegalovirus, mais pour faire court, on appellera l’objet cyto dans les exercices\n\n\n\n\n\n\n\n\n\n\nLa fonction count() permet d’afficher le nombre de lignes d’un jeu de données. Si on lui donne le nom d’une colonne en argument, elle affiche le nombre de ligne pour chaque valeur différente de cette colonne.\nAffichez le nombre d’hommes et de femmes\n\n\n\n\n\n\n\n\n\n\n\nAvec les fonctions group_by() et summarize() vues plus tôt, affichez le minimum, le maximum et la moyenne d’âge par sexe",
    "crumbs": [
      "TP 1"
    ]
  },
  {
    "objectID": "pages/TP1.html#exercice-2-nettoyer-les-données",
    "href": "pages/TP1.html#exercice-2-nettoyer-les-données",
    "title": "TP 1",
    "section": "Exercice 2 : Nettoyer les données",
    "text": "Exercice 2 : Nettoyer les données\nLa fonction summary(), utilisée sur un dataframe, permet de visualiser de nombreuses informations sur un jeu de données.\n\n\n\n\n\n\n\n\nProblème : on remarque que des variables comme le sexe ou l’ethnie sont codées en 0/1 et apparaissent comme des valeurs numériques. On souhaite recoder ces variables dans la classe factor. \nUn vecteur de classe factor contient des valeurs appartenant à une liste pré-établie (pas du texte libre, donc). On attribue une valeur arbitraire à chaque réponse, et les données sont stockées au format numérique. Par exemple, pour coder la variable sex en factor, R attribuera la valeur 1 à la première valeur qui apparait, puis 2, etc… On aura par exemple 1 = “Femme” et 2 = “Homme”, avec un vecteur contenant les valeurs c(1,2,2,2,1,1,2,1,2,1,2). Le vecteur contient donc des nombres, mais qui ne sont pas considérés comme des valeurs numériques.\nPour modifier la colonne d’un dataframe, on utilise la fonction mutate(), généralement avec :\n\n\n\n\n\n\n\n\nMais lorsque l’on souhaite modifier plusieurs colonnes d’un coup, on peut utiliser la variante mutate_at(). Cette fonction prend deux arguments : un vecteur de classe character contenant la liste des colonnes à modifier, et le nom de la fonction à appliquer\nConsigne : A partir du dictionnaire des données, identifiez les variables de classe facteur, et modifiez-les pour avoir un summary() pertinent\n\n\n\n\n\n\n\n\n\n\n\nLe résultat du summary() est désormais plus clair, mais on souhaite avoir dans le résultat le label des variables factor. Pour cela, on utilisera le package {forcats}.",
    "crumbs": [
      "TP 1"
    ]
  },
  {
    "objectID": "pages/TP1.html#exercice-3-visualiser-les-données",
    "href": "pages/TP1.html#exercice-3-visualiser-les-données",
    "title": "TP 1",
    "section": "Exercice 3 : Visualiser les données",
    "text": "Exercice 3 : Visualiser les données\nLe package {ggplot2} permet de générer des graphes à partir des données d’un dataframe. La fonction ggplot() fonctionne par “couches”, ou layers : on commence par créer les coordonnées (axe X,Y), puis on définit les points/lignes à afficher dans ggplot(), on utilise la fonction aes() (pour aesthetics) pour définir les axes, et on définit ensuite le type de graphe à afficher avec les fonctions geom_* (geom_point, geom_line, geom_histogram…)\nVisualiser le temps de réactivation en fonction des aKIRs, par statut du donneur\n\n\n\n\n\n\n\n\n\n\n\nUne façon plus interactive de visualiser les données est d’utiliser le package {GWalkR} :",
    "crumbs": [
      "TP 1"
    ]
  },
  {
    "objectID": "pages/TP1.html#test-statistique",
    "href": "pages/TP1.html#test-statistique",
    "title": "TP 1",
    "section": "Test statistique",
    "text": "Test statistique\nOn souhaite réaliser un t.test pour savoir si les KIRs évoluent en fonction du statut cmv :",
    "crumbs": [
      "TP 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "La biologie est une discipline qui étudie des sujets complexes : les être vivants. Cette complexité est due aux très nombreuses interactions entre les “briques” qui composent les être vivants, à différentes échelles : les interactions chimiques entre les atomes, les molécules, les protéines, les cellules, les tissus, les organes et même entre les individus. Ainsi, il est difficile d’étudier l’effet d’une protéine sans comprendre ses interactions avec le reste de l’organisme, il faut donc prendre en compte tout l’environnement autour du sujet d’étude pour bien le comprendre. \nDans le domaine de la Recherche Clinique, on dit souvent que pour développer UN médicament, il faut screener 10.000 molécules. C’est parce que pour 10.000 molécules prometteuses sur le papier, en réalité seules 1.000 environ démontreront une efficacité sur des cellules isolées. Parmis ces 1.000, seules 100 montreront une efficacité dans les tests précliniques (organes, animaux), et seules 10 passeront à l’étape d’expérimentation sur l’humain, pour finalement avoir une molécule qui finira en médicament. \nPour illustrer cela, on peut prendre l’exemple d’une boîte de petri qui contiendrait des tissus cancéreux : y mettre le feu permet de détruire les cellules cancéreuses, mais n’en fait pas un bon traitement pour autant : il faut prendre en compte le contexte dans lequel l’objet d’étude évolue (ici, en l’occurrence : le corps humain) \nMais dans un génome qui fait 3.2 milliards de paires de bases, il est difficile de retenir toutes les interactions entre les différents gènes, ou même de simplement les lister. L’informatique est alors apparue comme une solution, dans un premier temps de stockage et de requêtage, puis de calcul et de visualisation, pour aller jusqu’à permettre aujourd’hui d’effectuer des prédictions.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#quelques-exemples",
    "href": "index.html#quelques-exemples",
    "title": "Introduction",
    "section": "Quelques exemples",
    "text": "Quelques exemples\n\nStatistique descriptive\n\nDataCode",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#graphes",
    "href": "index.html#graphes",
    "title": "Introduction",
    "section": "Graphes",
    "text": "Graphes",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#reporting",
    "href": "index.html#reporting",
    "title": "Introduction",
    "section": "Reporting",
    "text": "Reporting\nQuelques exemples de rapports, tableaux de bord et applications réalisables avec R (et d’autres outils comme Shiny et Quarto)\n\nIndian blood banks\nNew Zealand dashboard\nQuarto HTML Basics\nIntro au Tidyverse",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "pages/Les_bases.html",
    "href": "pages/Les_bases.html",
    "title": "Les bases",
    "section": "",
    "text": "Rappel des bases\nR est un langage de programmation fait pour l’analyse de données et les statistiques\nUn objet permet de stocker des valeurs. On créé un objet en lui donnant un nom, et on lui assigne une valeur avec la flèche d’assignation &lt;-\n\n\n\n\n\n\n\n\nChaque valeur appartient à une (ou plusieurs) classes, qui définissent sa nature\n\n\n\n\n\n\n\n\nOn regroupe plusieurs valeurs dans des vecteurs. Un vecteur ne contient que des valeurs de même classe\n\n\n\n\n\n\n\n\nLes dataframes sont une classe d’objets correspondant à des tableaux (format Excel par exemple). Chaque colonne est un vecteur\n\n\n\n\n\n\n\n\nLes fonctions permettent d’interagir avec les objets, afin de les modifier. On écrit toujours une fonction avec des parenthèses à la fin, en indiquant au milieu l’objet sur lequel on l’applique et si besoin les arguments (options) à activer. Certaines fonctions sont vectorisées et renvoient un vecteur de même longueur modifié, d’autres sont des fonctions d’aggrégation et renvoient une seule valeur pour tout un vecteur (somme, nombre de valeurs, etc)\n\n\n\n\n\n\n\n\n{dplyr} est un package, une extension, qui permet d’appliquer des fonctions en chaîne en utilisant l’opérateur %&gt;% (pipe), avec une logique de chaîne d’assemblage sur une usine. Par exemple : on souhaite filtrer le jeu de données iris, puis sélectionner deux colonnes.\n\n\n\n\n\n\n\n\nLes fonctions en R ont généralement un nom simple, en anglais, qui correspond à ce qu’elles font : mean(), min(), max(), median(), sqrt(), sont des fonctions permettant de calculer respectivement la moyenne, le minimum, le maximum, la médiane et la racine carrée d’un vecteur numérique.\nfilter() permet de filtrer les lignes d’un tableau, et select() permet de sélectionner les colonnes.",
    "crumbs": [
      "Les bases"
    ]
  },
  {
    "objectID": "pages/TP3.html",
    "href": "pages/TP3.html",
    "title": "TP 3",
    "section": "",
    "text": "Par abus de langage, on parle souvent “du cancer” comme d’une seule maladie. En réalité il existe de nombreuses formes et différents mécanismes de cancer, en fonction des tissus touchés ou de certaines mutations génétiques.\nDans le cancer du sein, il existe trois mutations génétiques principales qui font fortement varier le pronostic des patientes, et qui sont systématiquement recherchées avant de débuter un traitement. Ces trois gènes sont ceux des récepteurs à la progestérone, des récepteurs aux oestrogènes et le gène HER2. Les options thérapeutiques disponibles pour les patientes varient fortement en fonction de ce profil génétique.\nPour ce TP, nous allons imaginer une étude clinique portant sur un nouveau traitement pour le cancer du sein. Le jeu de données à votre disposition contient des données sur l’age, le sexe, le profil génétique et l’évolution de la maladie.",
    "crumbs": [
      "TP 3"
    ]
  },
  {
    "objectID": "pages/TP3.html#dictionnaire-des-données",
    "href": "pages/TP3.html#dictionnaire-des-données",
    "title": "TP 3",
    "section": "Dictionnaire des données",
    "text": "Dictionnaire des données",
    "crumbs": [
      "TP 3"
    ]
  },
  {
    "objectID": "pages/TP3.html#exploration",
    "href": "pages/TP3.html#exploration",
    "title": "TP 3",
    "section": "Exploration",
    "text": "Exploration\nComme dans les TP précédents, utilisez summary() pour visualiser rapidement les données. Le dataframe s’appelera df",
    "crumbs": [
      "TP 3"
    ]
  },
  {
    "objectID": "pages/TP3.html#nettoyage",
    "href": "pages/TP3.html#nettoyage",
    "title": "TP 3",
    "section": "Nettoyage",
    "text": "Nettoyage\nRetirez les hommes du jeu de données\n\n\n\n\n\n\n\n\nUtilisez la fonction mutate() et case_when() pour modifier les variables “*_yn” et recoder les 0/1 en non/oui\n\n\n\n\n\n\nTip\n\n\n\nLe symbole ~ (tilde) peut signifier “prend la valeur” ou “en fonction de”\n\n\nRecodez également la variable “sexe” pour afficher “Femmes” au lieu de 0\n\n\n\n\n\n\n\n\nCréez une nouvelle colonne “genotype” qui combine les 3 colonnes “er”,“pr” et “her2. Si er ou pr est positive, on dit que la patiente est”RH+” (rh = récepteur aux hormones), sinon “RH-” Le génotype se compose de RH+/- et HER2+/-\n\n\n\n\n\n\nTip\n\n\n\nVous pouvez utiliser la fonction unite() et chercher la documentation associée sur internet ou en tapant ?unite() dans la console",
    "crumbs": [
      "TP 3"
    ]
  },
  {
    "objectID": "pages/TP3.html#visualisation",
    "href": "pages/TP3.html#visualisation",
    "title": "TP 3",
    "section": "Visualisation",
    "text": "Visualisation\nComplétez le code pour afficher la courbe de survie en fonction de différents facteurs.\n\n\n\n\n\n\nTip\n\n\n\nVous pouvez chercher la documentation associée au package ggsurvfit sur internet ou en tapant ?ggsurvfit dans la console. La fonction ggsurvfit() est un dérivé du package {ggplot} et permet de créer le graphe (idem pour les fonctions suivantes)",
    "crumbs": [
      "TP 3"
    ]
  }
]